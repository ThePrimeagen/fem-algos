{"pageProps":{"post":{"attributes":{"title":"Time And Space","description":"This is not the final frontier"},"html":"<h3 id=\"the-very-first-thing-we-tackle\">The very first thing we tackle</h3>\n<p>Time and Space.  Big O as they call it.</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"what-is-big-o\">What is Big O</h2>\n<p>Big O is a way to categorize your algorithms time or memory requirements based\non input.  It is not meant to be an exact measurement.  It will not tell you\nhow many CPU cycles it takes, instead it is meant to generalize the growth of\nyour algorithm.</p>\n<br/>\n<br/>\n\n<h3 id=\"example\">Example</h3>\n<p>So when someone says Oh of N, they mean your algorithm will grow linearily\nbased on input.</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"why-do-we-use-it\">Why do we use it?</h2>\n<p>Often it will help us make decisions about what data structures and algorithms\nto use.  Knowing how they will perform can greatly help create the best\npossible program out there.</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"so-lets-do-a-small-example\">So lets do a small example</h3>\n<p>First, Lets consider the following code.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sum_char_codes</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-built_in\">number</span> {\n    <span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n.<span class=\"hljs-property\">length</span>; ++i) {\n        sum += n.<span class=\"hljs-title function_\">charCodeAt</span>(i);\n    }\n\n    <span class=\"hljs-keyword\">return</span> sum;\n}\n</code></pre>\n<h3 id=\"for-those-that-know-big-o-this-is-easy\">For those that know big o, this is easy</h3>\n<p>But those who have never even classified a function, this may be a complete\nmystery.  That is fine.</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"big-o-said-differently\">Big O, said differently</h3>\n<p>As your input grows, how fast does computation or memory grow?</p>\n<br/>\n<br/>\n\n<h3 id=\"important-concepts\">Important concepts</h3>\n<ol>\n<li>growth is with respect to the input</li>\n</ol>\n<br/>\n<br/>\n\n<h3 id=\"in-the-real-world\">In the real world</h3>\n<p>obviously memory growing is not computationally free, but in the matter of\nthinking about algorithms, we don&#39;t necessarily think about that.</p>\n<br/>\n<br/>\n\n<p>In languages like Go or JavaScript you pay even heavier penalties because the\nmemory can be kept around, grows faster, and causes complete halts in your\nprogram for cleanup.</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"lets-go-back-to-our-example\">Lets go back to our example</h3>\n<p>Lets look at input.  How does our program&#39;s execution time grow with respect to\ninput?</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sum_char_codes</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-built_in\">number</span> {\n    <span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n.<span class=\"hljs-property\">length</span>; ++i) {\n        sum += n.<span class=\"hljs-title function_\">charCodeAt</span>(i);\n    }\n\n    <span class=\"hljs-keyword\">return</span> sum;\n}\n</code></pre>\n<br>\n<br>\n\n<p>Me&gt; It may or may not be obvious, but we have an <code>N</code> relationship.  <code>O(N)</code> time complexity</p>\n<br>\n\n<p>You&gt; How can you tell?</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"simplest-trick-for-complexity\">Simplest trick for complexity</h3>\n<p>Look for loops</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sum_char_codes</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-built_in\">number</span> {\n    <span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n.<span class=\"hljs-property\">length</span>; ++i) {\n        sum += n.<span class=\"hljs-title function_\">charCodeAt</span>(i);\n    }\n\n    <span class=\"hljs-keyword\">return</span> sum;\n}\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"whats-the-running-time\">What&#39;s the running time</h3>\n<p>If the previous was O(N), what&#39;s this?</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sum_char_codes</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-built_in\">number</span> {\n    <span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n.<span class=\"hljs-property\">length</span>; ++i) {\n        sum += n.<span class=\"hljs-title function_\">charCodeAt</span>(i);\n    }\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n.<span class=\"hljs-property\">length</span>; ++i) {\n        sum += n.<span class=\"hljs-title function_\">charCodeAt</span>(i);\n    }\n\n    <span class=\"hljs-keyword\">return</span> sum;\n}\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<p><img src=\"/fem-algos/./images/2n.jpg\" alt=\"It 2N?\"></p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"important-concepts-1\">Important concepts</h3>\n<ol>\n<li>growth is with respect to the input</li>\n<li>Constants are dropped</li>\n</ol>\n<p><code>O(2N)</code> -&gt; <code>O(N)</code> and this makes sense.  That is because Big O is meant to\ndescribe the upper bound of the algorithm (the growth of the algorithm).  The\nconstant eventually becomes irrelevant.</p>\n<br/>\n<br/>\n\n<p>Take the following:</p>\n<p>N = 1, O(10N) = 10, O(N^2) = 1</p>\n<br/>\n\n<p>N = 5, O(10N) = 50, O(N^2) = 25</p>\n<br/>\n\n<p>N = 100, O(10N) = 1,000, O(N^2) = 10,000 // 10x bigger</p>\n<br/>\n\n<p>N = 1000, O(10N) = 10,000, O(N^2) = 1,000,000 // 100x bigger</p>\n<br/>\n\n<p>N = 10000, O(10N) = 100,000, O(N^2) = 100,000,000 // 1000x bigger</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"there-is-practical-vs-theoretical-differences\">There is practical vs theoretical differences</h3>\n<p>Just because N is faster than N^2, doesn&#39;t mean practically its always faster\nfor smaller input.</p>\n<br/>\n<br/>\n\n<p>Remember, we drop constants.  Therefore O(100N) is faster than O(N^2) but\npractically speaking, you would probably win for some small set of input.</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"lets-do-another-example\">Lets do another example</h3>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sum_char_codes</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-built_in\">number</span> {\n    <span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n.<span class=\"hljs-property\">length</span>; ++i) {\n        <span class=\"hljs-keyword\">const</span> charCode = n.<span class=\"hljs-title function_\">charCodeAt</span>(i);\n        <span class=\"hljs-comment\">// Capital E</span>\n        <span class=\"hljs-keyword\">if</span> (charCode === <span class=\"hljs-number\">69</span>) {\n            <span class=\"hljs-keyword\">return</span> sum;\n        }\n\n        sum += charCode;\n    }\n\n    <span class=\"hljs-keyword\">return</span> sum;\n}\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"in-bigo-we-often-consider-the-worst-case\">In BigO we often consider the worst case</h3>\n<p>Especially in interviews (i have never been asked for best, average, and worst\ncase, just worst case). <br/></p>\n<p>E = 69 <br/></p>\n<p>Therefore any string with E in it will terminate early (unless E is the last item in the list). <br/></p>\n<p>ITS STILL <code>O(N)</code> <br/></p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"important-concepts-2\">Important concepts</h3>\n<ol>\n<li>growth is with respect to the input</li>\n<li>Constants are dropped</li>\n<li>Worst case is <em>usually</em> the way we measure,</li>\n</ol>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"the-common-complexities\">The common complexities</h3>\n<p><a href=\"https://www.hackerearth.com/practice/notes/big-o-cheatsheet-series-data-structures-and-algorithms-with-thier-complexities-1/\">Source</a>\n<img src=\"/fem-algos/./images/big-o-face.png\" alt=\"Big O Notation\"></p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"some-examples\">Some examples</h3>\n<h2 id=\"on2\">O(N^2)</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sum_char_codes</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-built_in\">number</span> {\n    <span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n.<span class=\"hljs-property\">length</span>; ++i) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; n.<span class=\"hljs-property\">length</span>; ++j) {\n            sum += charCode;\n        }\n    }\n\n    <span class=\"hljs-keyword\">return</span> sum;\n}\n</code></pre>\n<h2 id=\"on3\">O(N^3)</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sum_char_codes</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-built_in\">number</span> {\n    <span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n.<span class=\"hljs-property\">length</span>; ++i) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; n.<span class=\"hljs-property\">length</span>; ++j) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> k = <span class=\"hljs-number\">0</span>; k &lt; n.<span class=\"hljs-property\">length</span>; ++k) {\n                sum += charCode;\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> sum;\n}\n</code></pre>\n<h2 id=\"on-log-n\">O(n log n)</h2>\n<ul>\n<li>Quicksort (we will implement and explain)</li>\n</ul>\n<h2 id=\"olog-n\">O(log n)</h2>\n<ul>\n<li>Binary search trees</li>\n</ul>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"there-is-one-time-that-we-will-see-today-that-hasnt-been-mentioned\">There is one time that we will see today, that hasn&#39;t been mentioned</h3>\n<p>O(sqrt(n))</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"why-so-obviated\">Why so obviated?</h2>\n<p>There are other resources out there to dive deep into big o notation.  And I\njust don&#39;t think we need Yet Another Big O explanation.  Instead I am going to\nfocus on actively looking at running times and we will determine things\ntogether.</p>\n<br/>\n<br/>\n\n<h3 id=\"important-concepts-3\">Important concepts</h3>\n<ol>\n<li>growth is with respect to the input</li>\n<li>Constants are dropped</li>\n<li>Worst case is <em>usually</em> the way we measure</li>\n</ol>\n<br/>\n<br/>\n\n<h3 id=\"one-more-note\">One more note</h3>\n<p>Is there anything else besides Big O?  Well, there is technically a bunch of\ndifferent ways to measure the complexity of algorithms, but in general the\neasiest one to use is the &quot;Upper Bound&quot;</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"space-the-final-frontier\">Space the Final Frontier</h3>\n<p>We pretty much wont be going over space in this course.  Just not something we\nwill be discussing.  I find this less consequetial in daily life considering I\nsee things like this.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// or whatever it is in react</span>\n<span class=\"hljs-comment\">// O(N) time + O(N) space!  COUNT ME IN</span>\n<span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Component</span>\n            <span class=\"hljs-attr\">...props</span> /&gt;</span></span>\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"before-we-go\">Before we go</h3>\n<p>Questions?</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n","slug":"time-and-space-complexity","title":"Time And Space","section":"Algorithms and Time Space Complexity","icon":"dumpster-fire","filePath":"/home/runner/work/fem-algos/fem-algos/lessons/02-algorithms-and-time-space-complexity/A-time-and-space-complexity.md","nextSlug":"/fem-algos/lessons/our-first-datastructure/ready","prevSlug":"/fem-algos/lessons/introduction/intro"}},"__N_SSG":true}