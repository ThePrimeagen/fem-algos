{"pageProps":{"post":{"attributes":{"title":"Heap","description":"Just say Priority Queue"},"html":"<h3 id=\"if-you-say-priority-queue-in-an-interview-ill-hire-you\">If you say priority queue in an interview, I&#39;ll hire you</h3>\n<p>This is sort of a joke, but also not.</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"the-heap-datastructure\">The Heap DataStructure</h3>\n<p>The simplest way to put it is a binary tree where every child and grand child\nis smaller (MaxHeap), or larger (MinHeap) than the current node.</p>\n<ul>\n<li>Whenever a node is added, we must adjust the tree</li>\n<li>Whenever a node is deleted, we must adjust the tree</li>\n<li>There is no traversing the tree</li>\n</ul>\n<p>(whiteboard)</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"some-cool-characteristics\">Some cool characteristics</h3>\n<ul>\n<li>It is self balancing</li>\n<li>It can be used for priority</li>\n<li>Funnest data structure to implement, but easy to get wrong!</li>\n</ul>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"if-there-is-time\">If there is time</h3>\n<p>Lets implement it!</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"careful-about-garbage\">Careful about garbage.</h3>\n<p>the previous values in the array remain unless you nil them out...</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n","slug":"heaps","title":"Heap","section":"Trees","icon":"dumpster-fire","filePath":"/home/runner/work/fem-algos/fem-algos/lessons/10-trees/C-heaps.md","nextSlug":"/fem-algos/lessons/trees/tries","prevSlug":"/fem-algos/lessons/trees/binary-search-trees"}},"__N_SSG":true}