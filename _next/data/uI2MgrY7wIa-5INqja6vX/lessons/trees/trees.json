{"pageProps":{"post":{"attributes":{"title":"Trees","description":"Near and Dear to my heart"},"html":"<h2 id=\"we-did-it\">We did it!</h2>\n<p>We are done with lists...</p>\n<br/>\n<br/>\n\n<p>but in a sense... the next data structure is a list with multiple paths...</p>\n<br/>\n<br/>\n\n<p>The best part is that our knowledge of recursion will get very solidified over\nthe next couple sections most traversals are recursive...</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n\n<h3 id=\"all-programming-eventually-leads-to-trees\">All programming eventually leads to trees</h3>\n<p>I swear, every complex project I have ever worked on ends up being a tree\nexercise.  I hope you are ready!  This is where we really have to put all of\nour skills together.</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"welcome-to-day-2\">Welcome to day 2!!!</h3>\n<p>This is day two and we will be jumping right in!</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"also-i-am-plaque-licking-close-to-yt\">Also I am plaque licking close to YT</h3>\n<p>Less than 4k subs.  So pumped</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"for-those-just-coming-back-after-day-1\">For those just coming back after day 1</h3>\n<p>So for day one we covered everything to do with lists.  We focused heartily on\nthem.  Today we will be focusing on more complex algorithms.  We will be\nfocusing on Trees/Graphs/Maps.</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"where-are-trees\">Where are trees?</h3>\n<ul>\n<li>Your filesystem is a tree</li>\n<li>The dom is a tree</li>\n<li>Trees are massively important in compilers.  You have probably mininumly\nheard the term Abstract Syntax Tree.</li>\n<li>and there is more...</li>\n</ul>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"lets-do-a-quick-whiteboard-example-to-solidify-it\">Lets do a quick whiteboard example to solidify it.</h3>\n<p>Just in case none of those examples stuck with you</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"terminology\">Terminology</h3>\n<p>root - the most parent node. The First. Adam. <br/>\nheight - The longest path from the root to the most child node <br/>\nbinary tree - a tree in which has at most 2 children, at least 0 children <br/>\ngeneral tree - a tree with 0 or more children <br/>\nbinary search tree - a tree in which has a specific ordering to the nodes and at most 2 children <br/>\nleaves - a node without children <br/>\nbalanced - A tree is <em>perfectly</em> balanced when any node&#39;s left and right children have the same height. <br/>\nbranching factor - the amount of children a tree has. <br/></p>\n<p> <br/> <br/></p>\n<p>Hopefully this makes &quot;seeing&quot; quicksort start to make more sense... Its just a structure.</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"traversals\">Traversals</h3>\n<p>there are different ways in which you can visit the nodes of a tree.</p>\n<ul>\n<li>pre order</li>\n<li>in order</li>\n<li>post order\n(whiteboard)</li>\n</ul>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"lets-code-for-a-second\">Lets code for a second</h3>\n<p>Lets create all three different traversals!</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"these-types-of-traversals-are-known-as\">These types of traversals are known as</h3>\n<p>Depth First Search.  But that isn&#39;t the only traversal there is!</p>\n<p>Breadth first search.\n(whiteboard)</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"lets-implement\">Lets implement</h3>\n<ul>\n<li>bfs</li>\n</ul>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"one-question\">One Question</h3>\n<p>What do you like more?</p>\n<ul>\n<li>BFS?</li>\n<li>DFS?</li>\n</ul>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n\n\n\n<h3 id=\"practice-problem\">PRACTICE PROBLEM!</h3>\n<p>This use to be a very common problem in the hiring world.</p>\n<ul>\n<li>Comparing two binary trees to see if they are equal in both shape and\nstructure.</li>\n</ul>\n<p>Lets first whiteboard it\n(whiteboard)</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h3 id=\"questions-before-we-implement-it\">Questions before we implement it?</h3>\n<p>(to the greatest editor)</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n","slug":"trees","title":"Trees","section":"Trees","icon":"dumpster-fire","filePath":"/home/runner/work/fem-algos/fem-algos/lessons/10-trees/A-trees.md","nextSlug":"/fem-algos/lessons/trees/binary-search-trees","prevSlug":"/fem-algos/lessons/recursion/divide-and-conquer"}},"__N_SSG":true}